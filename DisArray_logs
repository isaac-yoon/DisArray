DESIGN DECISIONS and BUG LOGS

4.27.2020
- database schema
	- can users be associated with both servers and channels?
	- what is the relationship between channels and servers?

	- have users be associated with servers
	- a server can have many channels. a channel can only have one server


4.28.2020
- implementing demo login functionality
	- because my project involves modals for both login, signup, and demo-login, it was a bit difficult to determine the best way to implement demo login functionality

	- do I make a separate demo-login modal?

	- I opted to use the login modal and prefill values using a demologin user account that was already saved in 

- hit a pretty nasty bug involving and errors modals today
	- This is how the bug was created. I wrote some code that involved closing a modal upon submission of a form. 
	- This was written so that I could have a demo user be logged in and have the modal close upon login. 
	- There were no issues with functionality at first glance because a demo login user will always have the correct credentials. 
	- However, problems arose when a user attempted to login with incorrect credentials.
	- What would happen is the modal would close even if they attempted to login with incorrect credentials. 
	- Upon reopening the modal, the errors would persist. 
	- The desired behavior was the errors would be cleared upon the modal closing. 
	- The errors state would only be updated when after another login attempt. 
	- The solution was to only reset the input fields and close the modal upon a successful processing of form rather than always doing it upon submission.
	- Code should be under session_form.jsx under the handleSubmit function.

- Image Rendering on Heroku
	- had to refactor code
		1. use rails helper method image_url('')
		2. attach image onto windows in application.html.erb

4.29.2020
- Routing issue
	- How do I redirect to the home page when a user types in a /randomlettershere?
		- Issue: using switch only allows the developer to render one component
		- Have a route that with an exact path "/" and render a null component
		- Below it, have a Redirect path = "/" that redirects to the home page

- Components Structure
	- Have one component that houses all components in a single page
	- render the one component in routes to create auth/protected routes

4.30.2020
- Issue with Server Index Container
	- in mapStateToProps, there was an issue with state.entities.servers
	- state.entities.servers was undefined
	- issue was in the reducers
		- rather than putting my serversReducer in entities, I put it in the rootReducer
		- adding the serversReducer to my entitiesReducer fixed the problems


5.1.2020
- Issue with Demo Login Button in Main Login Form Container
	- demo() function did not have access to props
		- tried deconstructing it but 'this' was still undefined
		- then I realized that 'this' was different inside the demo() function
		- SOLUTION: binding this to the demo function fixed the issue!

	- demo() function was submitting the form upon click as well as trying to execute the ghost typewriter program
		- SOLUTION: adding a e.preventDefault() to prevent form submission


5.2.2020
- Issue with state and servers
	- I had only be testing my code with one user. Upon logging in another user's account, I realized there were some major bugs in my code. 
	- For starters, in my servers controller, I was fetching all servers upon log in. 
		- Fixed that by modifying index action in servers controller, selecting servers where it's owner id matched the current user's id
		- This only fixed it if the page was refreshed. However, it did not fix it during initial log in. 
			- What was happening was upon initial log in, the servers that was present during the last log in was being loaded. 
- FIXED: in my serversReducer, in RECEIVE_SERVERS, get rid of oldState so that oldState is not being appended to another user's login.
- Questions to ask: when would you use oldState and when would you just replace it?
	- performance => oldState would work better in some cases

5.3.2020
- Frontend Routes
	- made some changes with frontend routes
	- specifically, channels/@me/:serverId/:channelId vs. channels/:serverId/:channelId
	- made it the former option because it was easier to use react switch statements to switch components out

- when trying to render using mapDispatchToState using the servers slice of state, it would error out in a specific manner
	- when refreshing while on a server index item
	- this was probably because for a brief moment, the server slice of state was blank
	- this was fixed using a ternary in the render function of server name container

5.4.2020
- had an issue where the container was not being correctly sized
	- the width was defined in my CSS file as 300px but it was becoming smaller in certain edge cases
	- using a min-width property of 300px fixed it

5.5.2020
- issue where could not extract wildcard from match.params
	- wildcard was not set up properly
	- had a hacky solution
		- SOLUTION: access the serverId directly through the URL (through props.history.pathname)

